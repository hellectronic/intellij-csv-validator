buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'com.github.hurricup:gradle-grammar-kit-plugin:2019.1'
    }
}

plugins {
    id 'org.jetbrains.intellij' version '0.4.8'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'com.github.ManifestClasspath' version '0.1.0-RELEASE'
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

group 'net.seesharpsoft.intellij.plugins'
version pluginVersion

apply plugin: 'java'
sourceCompatibility = javaVersion
targetCompatibility = javaTargetVersion
tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
repositories {
    mavenCentral()
}
dependencies {
    compileOnly 'org.apache.ant:ant:1.7.0'
    testCompile 'org.mockito:mockito-core:2.23.0'
}
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'gen']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

apply plugin: 'idea'
idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
        vcs = 'Git'
    }
    module {
        generatedSourceDirs += file('gen')
    }
}

apply plugin: 'org.jetbrains.intellij'
intellij {
    // IDE version - https://www.jetbrains.com/intellij-repository/releases
    version = System.getenv().getOrDefault('IDEA_VERSION', 'IC-2019.1')
    pluginName = 'CSV Plugin'
    instrumentCode = true
    updateSinceUntilBuild = false
    downloadSources = false
    plugins = ['git4idea', 'github']
}
publishPlugin {
    username = System.getenv().getOrDefault('JI_USER', '')
    password = System.getenv().getOrDefault('JI_PASSWORD', '')
    channels = [System.getenv().getOrDefault('JI_CHANNELS', 'Testing')]
}

test {
    jacoco {
        enabled = true
    }
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

apply plugin: 'org.jetbrains.grammarkit'
grammarKit {
    // version of IntelliJ patched JFlex - https://bintray.com/jetbrains/intellij-third-party-dependencies/jflex
    jflexRelease = '1.7.0-1'

    // tag or short commit hash of Grammar-Kit to use - https://github.com/JetBrains/Grammar-Kit
    grammarKitRelease = System.getenv().getOrDefault('GRAMMAR_KIT_VERSION', '2019.1')
}

import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

task generateCsvParser(type: GenerateParser) {
    source = 'src/main/java/net/seesharpsoft/intellij/plugins/csv/Csv.bnf'
    targetRoot = 'gen'
    pathToParser = '/net/seesharpsoft/intellij/plugins/csv/parser/CsvParser.java'
    pathToPsiRoot = '/net/seesharpsoft/intellij/plugins/csv/psi'
    purgeOldFiles = true
}

task generateCsvLexer(dependsOn: generateCsvParser, type: GenerateLexer) {
    source = 'src/main/java/net/seesharpsoft/intellij/plugins/csv/CsvLexer.flex'
    targetDir = './gen/net/seesharpsoft/intellij/plugins/csv/'
    targetClass = 'CsvLexer'
    purgeOldFiles = true
}

compileJava {
    dependsOn generateCsvLexer
}
